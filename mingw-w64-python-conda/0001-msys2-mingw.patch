diff -urN -x '*.orig' -x '*.rej' -x .version conda-4.11.0.orig/conda/base/context.py conda-4.11.0/conda/base/context.py
--- conda-4.11.0.orig/conda/base/context.py	2021-11-23 00:23:00.000000000 +0800
+++ conda-4.11.0/conda/base/context.py	2022-02-24 02:47:20.972000000 +0800
@@ -25,7 +25,7 @@
 from .._vendor.boltons.setutils import IndexedSet
 from .._vendor.frozendict import frozendict
 from .._vendor.toolz import concat, concatv, unique
-from ..common.compat import NoneType, iteritems, itervalues, odict, on_win, string_types
+from ..common.compat import NoneType, iteritems, itervalues, odict, on_win, on_unix_like, string_types
 from ..common.configuration import (Configuration, ConfigurationLoadError, MapParameter,
                                     ParameterLoader, PrimitiveParameter, SequenceParameter,
                                     ValidationError)
@@ -77,14 +77,14 @@
     if root_writable:
         fixed_dirs = (
             join(root_prefix, 'envs'),
-            join('~', '.conda', 'envs'),
+            # join('~', '.conda', 'envs'),
         )
     else:
         fixed_dirs = (
-            join('~', '.conda', 'envs'),
+            # join('~', '.conda', 'envs'),
             join(root_prefix, 'envs'),
         )
-    if on_win:
+    if on_win and not on_unix_like:
         fixed_dirs += join(user_data_dir(APP_NAME, APP_NAME), 'envs'),
     return tuple(IndexedSet(expand(p) for p in concatv(_envs_dirs, fixed_dirs)))
 
@@ -518,9 +518,9 @@
             cache_dir_name = 'pkgs32' if context.force_32bit else 'pkgs'
             fixed_dirs = (
                 self.root_prefix,
-                join('~', '.conda'),
+                # join('~', '.conda'),
             )
-            if on_win:
+            if on_win and not on_unix_like:
                 fixed_dirs += user_data_dir(APP_NAME, APP_NAME),
             return tuple(IndexedSet(expand(join(p, cache_dir_name)) for p in (fixed_dirs)))
 
@@ -585,8 +585,8 @@
     @property
     # This is deprecated, please use conda_exe_vars_dict instead.
     def conda_exe(self):
-        bin_dir = 'Scripts' if on_win else 'bin'
-        exe = 'conda.exe' if on_win else 'conda'
+        bin_dir = 'Scripts' if on_win and not on_unix_like else 'bin'
+        exe = 'conda.exe' if on_win and not on_unix_like else 'conda'
         return join(self.conda_prefix, bin_dir, exe)
 
     @property
@@ -620,8 +620,8 @@
                                 ('_CE_CONDA', 'conda'),
                                 ('CONDA_PYTHON_EXE', sys.executable)])
         else:
-            bin_dir = 'Scripts' if on_win else 'bin'
-            exe = 'conda.exe' if on_win else 'conda'
+            bin_dir = 'Scripts' if on_win and not on_unix_like else 'bin'
+            exe = 'conda.exe' if on_win and not on_unix_like else 'conda'
             # I was going to use None to indicate a variable to unset, but that gets tricky with
             # error-on-undefined.
             return OrderedDict([('CONDA_EXE', os.path.join(sys.prefix, bin_dir, exe)),
diff -urN -x '*.orig' -x '*.rej' -x .version conda-4.11.0.orig/conda/cli/main_init.py conda-4.11.0/conda/cli/main_init.py
--- conda-4.11.0.orig/conda/cli/main_init.py	2021-11-23 00:23:00.000000000 +0800
+++ conda-4.11.0/conda/cli/main_init.py	2022-02-24 02:47:20.980000000 +0800
@@ -6,7 +6,7 @@
 from logging import getLogger
 
 from ..base.context import context
-from ..common.compat import on_win
+from ..common.compat import on_win, on_unix_like
 
 log = getLogger(__name__)
 
@@ -32,7 +32,7 @@
         selected_shells = tuple(args.shells)
 
     if not selected_shells:
-        selected_shells = ('cmd.exe', 'powershell') if on_win else ('bash',)
+        selected_shells = ('cmd.exe', 'powershell') if on_win and not on_unix_like else ('bash',)
 
     if args.dev:
         assert len(selected_shells) == 1, "--dev can only handle one shell at a time right now"
diff -urN -x '*.orig' -x '*.rej' -x .version conda-4.11.0.orig/conda/common/compat.py conda-4.11.0/conda/common/compat.py
--- conda-4.11.0.orig/conda/common/compat.py	2021-11-23 00:23:00.000000000 +0800
+++ conda-4.11.0/conda/common/compat.py	2022-02-24 19:26:27.264400900 +0800
@@ -11,6 +11,7 @@
 from itertools import chain
 from operator import methodcaller
 import sys
+import sysconfig
 from tempfile import mkdtemp
 import warnings as _warnings
 
@@ -18,6 +19,8 @@
 on_mac = bool(sys.platform == "darwin")
 on_linux = bool(sys.platform == "linux")
 
+on_unix_like = bool('mingw' in sysconfig.get_platform())
+
 PY2 = sys.version_info[0] == 2
 PY3 = sys.version_info[0] == 3
 FILESYSTEM_ENCODING = sys.getfilesystemencoding()
diff -urN -x '*.orig' -x '*.rej' -x .version conda-4.11.0.orig/conda/common/path.py conda-4.11.0/conda/common/path.py
--- conda-4.11.0.orig/conda/common/path.py	2021-11-23 00:23:00.000000000 +0800
+++ conda-4.11.0/conda/common/path.py	2022-02-24 02:47:21.000000000 +0800
@@ -10,7 +10,7 @@
 import re
 import subprocess
 
-from .compat import on_win, string_types
+from .compat import on_win, on_unix_like, string_types
 from .. import CondaError
 from ..auxlib.decorators import memoize
 from .._vendor.toolz import accumulate, concat
@@ -161,7 +161,7 @@
 
 
 def get_python_short_path(python_version=None):
-    if on_win:
+    if on_win and not on_unix_like:
         return "python.exe"
     if python_version and '.' not in python_version:
         python_version = '.'.join(python_version)
@@ -171,7 +171,7 @@
 def get_python_site_packages_short_path(python_version):
     if python_version is None:
         return None
-    elif on_win:
+    elif on_win and not on_unix_like:
         return 'Lib/site-packages'
     else:
         py_ver = get_major_minor_version(python_version)
@@ -217,11 +217,11 @@
 
 
 def get_bin_directory_short_path():
-    return 'Scripts' if on_win else 'bin'
+    return 'Scripts' if on_win and not on_unix_like else 'bin'
 
 
 def win_path_ok(path):
-    return path.replace('/', '\\') if on_win else path
+    return path.replace('/', '\\') if on_win and not on_unix_like else path
 
 
 def win_path_double_escape(path):
diff -urN -x '*.orig' -x '*.rej' -x .version conda-4.11.0.orig/conda/core/initialize.py conda-4.11.0/conda/core/initialize.py
--- conda-4.11.0.orig/conda/core/initialize.py	2021-11-23 00:23:00.000000000 +0800
+++ conda-4.11.0/conda/core/initialize.py	2022-02-24 02:47:21.008000000 +0800
@@ -55,7 +55,7 @@
                         PosixActivator, XonshActivator, PowerShellActivator)
 from ..base.context import context
 from ..common.compat import (PY2, ensure_binary, ensure_utf8_encoding,
-                             ensure_text_type, on_mac, on_win, open)
+                             ensure_text_type, on_mac, on_win, on_unix_like, open)
 from ..common.path import (expand, get_bin_directory_short_path, get_python_short_path,
                            get_python_site_packages_short_path, win_path_ok)
 from ..exceptions import CondaValueError
@@ -249,7 +249,7 @@
     # ######################################
     # executables
     # ######################################
-    if on_win:
+    if on_win and not on_unix_like:
         conda_exe_path = join(conda_prefix, 'Scripts', 'conda-script.py')
         conda_env_exe_path = join(conda_prefix, 'Scripts', 'conda-env-script.py')
         plan.append({
@@ -302,7 +302,7 @@
     # ######################################
     # shell wrappers
     # ######################################
-    if on_win:
+    if on_win and not on_unix_like:
         plan.append({
             'function': install_condabin_conda_bat.__name__,
             'kwargs': {
@@ -434,6 +434,7 @@
 def make_initialize_plan(conda_prefix, shells, for_user, for_system, anaconda_prompt,
                          reverse=False):
     plan = make_install_plan(conda_prefix)
+    return plan
     shells = set(shells)
     if shells & {'bash', 'zsh'}:
         if 'bash' in shells and for_user:
@@ -744,7 +745,7 @@
     else:
         original_ep_content = ""
 
-    if on_win:
+    if on_win and not on_unix_like:
         # no shebang needed on windows
         new_ep_content = ""
     else:
@@ -1181,7 +1182,7 @@
 
 
 def _bashrc_content(conda_prefix, shell):
-    if on_win:
+    if on_win and not on_unix_like:
         from ..activate import native_path_to_unix
         conda_exe = native_path_to_unix(join(conda_prefix, 'Scripts', 'conda.exe'))
         conda_initialize_content = dals("""
diff -urN -x '*.orig' -x '*.rej' -x .version conda-4.11.0.orig/conda/gateways/connection/download.py conda-4.11.0/conda/gateways/connection/download.py
--- conda-4.11.0.orig/conda/gateways/connection/download.py	2021-11-23 00:23:00.000000000 +0800
+++ conda-4.11.0/conda/gateways/connection/download.py	2022-02-24 02:47:21.017000000 +0800
@@ -17,7 +17,7 @@
 from ...auxlib.ish import dals
 from ...auxlib.logz import stringify
 from ...base.context import context
-from ...common.compat import text_type
+from ...common.compat import (text_type, on_unix_like)
 from ...common.io import time_recorder
 from ...exceptions import (BasicClobberError, CondaDependencyError, CondaHTTPError,
                            ChecksumMismatchError, maybe_raise, ProxyError)
diff -urN -x '*.orig' -x '*.rej' -x .version conda-4.11.0.orig/conda/gateways/subprocess.py conda-4.11.0/conda/gateways/subprocess.py
--- conda-4.11.0.orig/conda/gateways/subprocess.py	2021-11-23 00:23:00.000000000 +0800
+++ conda-4.11.0/conda/gateways/subprocess.py	2022-02-24 19:30:33.888001000 +0800
@@ -52,9 +52,9 @@
             log.warning('CONDA_TEST_SAVE_TEMPS :: retaining pip run_script {}'.format(
                 script_caller))
     if hasattr(stdout, 'decode'):
-        stdout = stdout.decode('utf-8', errors='replace')
+        stdout = stdout.decode('utf-8-sig', errors='replace')
     if hasattr(stderr, 'decode'):
-        stderr = stderr.decode('utf-8', errors='replace')
+        stderr = stderr.decode('utf-8-sig', errors='replace')
     return stdout, stderr, process.returncode
 
 
